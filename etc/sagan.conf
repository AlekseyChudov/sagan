#  ,-._,-.    Sagan configuration file [http://sagan.softwink.com]
#  \/)"(\/    By Champ Clark III & The Softwink Team: http://www.softwink.com
#   (_o_)     Copyright (C) 2009-2011 Softwink, Inc., et al.
#   /   \/)   
#  (|| ||)    
#   oo-oo     


##############################################################################
# Standard _required_ Sagan options!
##############################################################################

# Sagan can read log entries via a FIFO (First In,  First Out) or via 
# 'standard input' (stdin).   If this option is _present_,  then Sagan assumes
# log entries will come in via a FIFO.  If this option is _not_ present,  then
# Sagan will 'assume' log entries will come in via stdin.   
#
# When Sagan takes input from stdin,  syslog-ng calls this via the 'program' 
# mode/call. 
#
# The --program flag can override this variable and force Sagan to use 
# stdin. 
#
# [optional] - Depending on system configuration.

var FIFO /var/run/sagan.fifo

# This variable contains the path of the Sagan rule sets.  It is required.

var RULE_PATH /usr/local/etc/sagan-rules

# Where Sagan should store it's lock file. 

var LOCKFILE /var/run/sagan/sagan.pid

# Where Sagan should store alerts,  in a text/alert  format. 

var ALERTLOG /var/log/sagan/alert

# This is the path where Sagan related files are stored.  For example,  
# Unified2 output files would be stored under this path.

var SAGANLOGPATH /var/log/sagan


# This is the IP address _of_ the Sagan system.   These options are used
# if Sagan is unable to determine a TCP/IP network address and/or port.
#
# [Required]
  
sagan_host 192.168.0.1
sagan_port 514

# If logging to a Snort/Prelude database,  and the rule set specifies the
# protocol a "any",  this is the protocol we default to.  This is only
# needed if you are # logging to a Snort/Prelude database. 
#
# [Defaults to 17 [UDP],  which is what normal 'syslog' traffic is.  If you
# want TCP to be the desired effect,  change this option to "6". 

; sagan_proto 17

# Disable DNS warnings.  Sagan will warn every time it has to do a DNS lookup
# when attempting to normalize a log entry.  You typically don't want to
# do DNS lookups with the log analysis.  More information can be found at:
# https://wiki.softwink.com/bin/view/Main/SaganDNS.  If it's not possible
# to gather the true TCP/IP address information,  you can supress these 
# warnings here.

; disable_dns_warnings


##############################################################################
# Snort database specific configurations                                     
##############################################################################

# Sagan "sensor" configuration.  If you plan on running Sagan and storing data
# to a Snort database,  these options are required.   This information gets 
# logged to the Snort database's "sensor" table to differentiate  between Snort
# IDS/IPS data and log data.   We don't really have an "interface", so we create
# one known as "syslog",  or what ever you'd like to call it.
#
# [Required if logging to a Snort database]

; sagan_hostname sagan
; sagan_interface syslog
; sagan_filter none
; sagan_detail 1

# If you plan on logging to a Snort database,  this is where you tell Sagan 
# where to log to.   The options should be pretty clear.  Currently Sagan 
# supports MySQL and PostgreSQL.  The "maxdb_threads" is the maximum number of
# threads that can be created.  This defaults to 50.
#
# [Required if logging to a Snort database]

; maxdb_threads 50
; output database: log, mysql, user=sagan password=secret dbname=snort_db host=192.168.0.1
; output database: log, postgresql, user=sagan password=secret dbname=snort_db host=192.168.0.1

##############################################################################
# External program/system calls configurations specifics
##############################################################################

# This option calls an external program when an event is triggered by a rule.
# Sagan basically makes a thread and calls the execl() system call.
# Data is supplied to the program being called via standard in (stdin). 
# Data can be sent in a "parsable" or "alert" format.   "parsable" will be
# probably easier for your external program to parse. 
#
# The "max_ext_threads" limits the amount of threads that can be created, 
# which defaults to 50.

; max_ext_threads 50
; output external: /home/champ/stdout parsable

##############################################################################
# libesmtp (SMTP/E-mail) specific configuration options
##############################################################################

# If you'd like Sagan to e-mail triggered events to you,  then you'll want
# to configure the below.t

# The max number of threads that can be spawned for SMTP.  This defaults to 
# 50. 

; max_email_threads 50

# If min_email_priority is set,  then Sagan will _only_ e-mail events equal to
# or less than this priority event.  If left commented our or set to 0, 
# Sagan will e-mail _all_ events.  This option does _not_ over ride rules
# with the "email:" option set! 

; min_email_priority 5

# This is where alerts will be sent if a rule _does not_ have a "email:"
# option.  If a rule does have "email:" option,  then the rules e-mail address
# will over ride this option.  If this option is not set,  then only
# rules with the "email:" option will be sent. 

; send-to sagan-alerts@example.com

# Server information.  This tells Sagan "who" to send e-mail as and where 
# the SMTP server to relay is.  This must be set if the "send-to" option
# set,  or you have rules with the "email:" option!
#
; output email: smtpserver=192.168.0.1:25 from=sagan-alert@example.com

##############################################################################
# Logzilla (AKA : php-syslog-ng) database configuration specifics
##############################################################################

# If you'd like Sagan to log information to a Logzilla database (MySQL or
# PostgreSQL),  then you'll need to enabled this option.  The 
# "max_logzilla_threads" option specifies the maximum number of threads that
# can be used to log to a Logzilla database.  This defaults to 50.  

; max_logzilla_threads 50
; output logzilla: full, mysql, user=sagan password=secret dbname=syslog host=192.168.0.1
; output logzilla: alert, postgresql, user=sagan password=secret dbname=syslog host=192.168.0.1

##############################################################################
# Prelude (IDMEF) output plug in
##############################################################################

# This lets Sagan output to the Prelude security framework.  This allows 
# Sagan events to be viewed in the Prelude "Prewikka" console.  The Prelude
# framework is useful in corelating events from multiple sources.   Prelude
# uses fhe Intrusion Detection Message Exchange Format (IDMEF) format,  which
# also might be useful. 
#
# more information,  please see: http://www.prelude-technologies.com

; max_prelude_threads 50
; output prelude: profile=sagan

##############################################################################
# Unified2 output plug in 
##############################################################################

# This lets Sagan log the Snort's 'Unified2' output format.  This allows 
# events generated by Sagan to be read and queued for external programs 
# like Barnyard2 (http://www.securixlive.com/barnyard2/).  Barnyard2 can 
# the record events in various formats (Prelude,  alert_fast,  log_ascii, 
# log_tcpdump,  Sguil,  MySQL,  PostgreSQL, ODBC, MS-SQL and Oracle). 

; output unified2: filename snort.u2, limit 128, nostamp
; output unified2: filename sagan.u2, limit 128

##############################################################################
# Sagan syslog "Sniffier" mode.  (PLOG). Promiscuous syslog injector
##############################################################################

# This lets Sagan "listen" on a network interface via pcap/bpf and "suck"
# up UDP syslog messages.  When it "finds" a syslog message within a packet,
# it injects it into /dev/log.  Basically,  it 'sniffs' syslog messages and
# injects them to your syslog daemon (for archival purposes) and Sagan
# (for analysis).  Good for environments you can't reconfigure syslog
# services.   For more information,  see src/sagan-plog.c.

# Network interface to "sniff" traffic on.
; plog_interface eth0

# Syslog "port" to listen on...
; plog_port 514

# Where to inject "found" messages to.
; plog_logdev /dev/log

##############################################################################
# Sagan rule sets! Arrgh Villains! Sagan neither takes nor gives mercy!
##############################################################################

# This should be enabled!  "classifications.config" allows correlation between
# a short name (for example,  "attempted-admin") and a priority level 
# (for example, "1").  "reference.config" gives your various places to learn
# more information pertaining to an alert. 

include $RULE_PATH/classification.config
include $RULE_PATH/reference.config

#############################################################################
# Sagan normalization 'rule base'. (liblognorm)
#############################################################################

# These "rules" are for the liblognorm library.  These are use to further 
# "normalize" (extract useful information out of) log messages.  These rules
# are loaded in a dynamic method.  That is,  rather than load all these 
# at run time,  they are loaded 'as needed' by the Sagan rule sets.  These
# get triggered by the 'normalize:' flag within a Sagan rule. 

normalize: cisco, $RULE_PATH/cisco-normalize.rulebase
normalize: openssh, $RULE_PATH/openssh-normalize.rulebase
normalize: smtp, $RULE_PATH/smtp-normalize.rulebase
normalize: dns, $RULE_PATH/dns-normalize.rulebase
normalize: imap, $RULE_PATH/imap-normalize.rulebase

# These are the specific rule sets of events which are of interest and require
# notification.  Tailor these to your specific needs and check from time to 
# time for new rule sets that might be of benefit.

include $RULE_PATH/apache.rules
include $RULE_PATH/apc-emu.rules
include $RULE_PATH/arp.rules
include $RULE_PATH/asterisk.rules
include $RULE_PATH/attack.rules
include $RULE_PATH/bash.rules
include $RULE_PATH/bind.rules
include $RULE_PATH/bonding.rules
include $RULE_PATH/bro-ids.rules
include $RULE_PATH/cacti-thold.rules
include $RULE_PATH/cisco-ios.rules
include $RULE_PATH/cisco-pixasa.rules
include $RULE_PATH/courier.rules
include $RULE_PATH/dovecot.rules
include $RULE_PATH/fortinet.rules
include $RULE_PATH/ftpd.rules
include $RULE_PATH/grsec.rules
include $RULE_PATH/hordeimp.rules
include $RULE_PATH/hostapd.rules
include $RULE_PATH/imapd.rules
include $RULE_PATH/ipop3d.rules
include $RULE_PATH/juniper.rules
include $RULE_PATH/kismet.rules
include $RULE_PATH/knockd.rules
include $RULE_PATH/milter.rules
include $RULE_PATH/mysql.rules
include $RULE_PATH/nginx.rules
include $RULE_PATH/ntp.rules
include $RULE_PATH/openssh.rules
include $RULE_PATH/ossec-mi.rules
include $RULE_PATH/ossec.rules
include $RULE_PATH/php.rules
include $RULE_PATH/postfix.rules
include $RULE_PATH/postgresql.rules
include $RULE_PATH/pptp.rules
include $RULE_PATH/proftpd.rules
include $RULE_PATH/pure-ftpd.rules
include $RULE_PATH/racoon.rules
include $RULE_PATH/roundcube.rules
include $RULE_PATH/rsync.rules
include $RULE_PATH/samba.rules
include $RULE_PATH/sendmail.rules
include $RULE_PATH/snort.rules
include $RULE_PATH/solaris.rules
include $RULE_PATH/sonicwall.rules
include $RULE_PATH/squid.rules
include $RULE_PATH/su.rules
include $RULE_PATH/syslog.rules
include $RULE_PATH/tcp.rules
include $RULE_PATH/telnet.rules
include $RULE_PATH/tripwire.rules
include $RULE_PATH/vmpop3d.rules
include $RULE_PATH/vmware.rules
include $RULE_PATH/vpopmail.rules
include $RULE_PATH/vsftpd.rules
include $RULE_PATH/windows.rules
include $RULE_PATH/wordpress.rules
include $RULE_PATH/xinetd.rules
include $RULE_PATH/zeus.rules
